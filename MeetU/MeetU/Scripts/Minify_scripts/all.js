!function(){"use strict";function e(e,t,n,a,i){function o(){var t=0;e.hasLoaded=!1,s.query({start:r,amount:l},function(n){e.meetupViews.push.apply(e.meetupViews,n),t=n.length,r+=t,5>t&&(e.hasFetchedAll=!0),e.hasFetchedAll?e.hasLoaded=!0:$(window).bind("scroll",d)})}var r=0,l=5,s=t("/api/Meetups"),u=t("/api/loggedUser"),c=t("/api/Joins"),p=t("/api/Comments/");e.hasLoaded=!1,e.hasFetchedAll=!1,n.all([s.query({start:r,amount:2*l},function(t){e.meetupViews=t,r+=2*l}).$promise,u.query(function(t){e.userId=t[0].userId,e.userName=t[0].userName}).$promise]).then(function(){e.hasLoaded=!0,$(window).scroll(d),$(window).scrollTop()+$(window).height()>$(document).height()&&o()});var d=_.debounce(function(){$(window).scrollTop()+$(window).height()>$(document).height()-100&&($(window).unbind("scroll"),o())},200);e.$on("$destroy",function(){$(window).unbind("scroll")}),e.isIn=function(t){return t.some(function(t){return t.userId===e.userId})},e.toggleJoin=function(t){if(e.isIn(t.joins))c["delete"]({meetupId:t.meetup.id,userId:e.userId}).$promise.then(function(){var n=t.joins;n.splice(n.findIndex(function(t){return t.userId===e.userId}),1)},function(e){a.error(e)});else{var n=new c({meetupId:t.meetup.id,userId:e.userId});n.$save(function(){t.joins.push({meetupId:t.meetup.id,userId:e.userId,userName:e.userName})})}},e.toggleDetail=function(e,t){t&&(e.commentCount=0,p.query({meetupId:e.meetup.id},function(t){e.commentData=t,e.commentCount=e.commentData.length}))},e.addComment=function(t){var n=new p({content:t.newComment,by:e.userId,meetupId:t.meetup.id});n.$save(n,function(n){t.commentData.push({id:n.id,content:t.newComment,by:e.userName,meetupId:t.meetup.id,at:n.at}),t.newComment="",t.commentCount=t.commentData.length},function(e){a.error(e)})},e.deleteComment=function(e,t){i({text:"Are you sure you want to delete this comment?",title:"Deleting a comment",ok:"Yes",cancel:"No"}).then(function(){p["delete"]({id:t}).$promise.then(function(){var n=e.commentData;n.splice(n.findIndex(function(e){return e.id===t}),1),e.commentCount=e.commentData.length},function(e){a.error(e)})})},e.deleteMeetup=function(t){i({text:"Are you sure you want to delete this MeetUp?",title:"Deleting a meetup",ok:"Yes",cancel:"No"}).then(function(){s["delete"]({id:t}).$promise.then(function(){var n=e.meetupViews;n.splice(n.findIndex(function(e){return e.meetup.id===t}),1)},function(e){a.error(e)})})},e.parseParticipantName=function(e){return"@"+e.userName.muStrip("@").muCapitalizeFirstLetter()},e.polishUserName=function(e){return e.muStrip("@").muCapitalizeFirstLetter()}}angular.module("meetupModule",["ngResource","angularMoment","ngRoute","angular-confirm","ui.bootstrap.tpls"]).controller("meetupIndexController",e),e.$inject=["$scope","$resource","$q","$log","$confirm"],String.prototype.muStrip=function(e){return this.indexOf(e)<0?this:this.substring(0,this.indexOf(e))},String.prototype.muCapitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)}}(),function(){"use strict";function e(e,t,n,a){var i=this;i.createParams={},i.submitForm=function(){n("/api/loggedUser").query(function(e){i.createParams.sponsor=e[0].userId}).$promise.then(function(){e.debug(i.createParams),n("/api/Meetups").save(i.createParams).$promise.then(function(){e.debug(i.createParams),a.path("/index")})})},$(".js-meetup-create-where").placepicker(),$(".js-meetup-create-when").datetimepicker({minDate:"0"})}angular.module("meetupModule").controller("MeetupCreateController",e),e.$inject=["$log","$q","$resource","$location"]}(),function(){"use strict";function e(e){e.tab=1,e.setTab=function(t){e.tab=t},e.isSet=function(t){return e.tab===t}}angular.module("meetupModule").controller("TabController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,t,n,a){var i=this;i.hasLoaded=!1;var o=n("/api/Users");o.get({userId:a.profileId},function(e){i.userData=e}).$promise.then(function(){e.debug("User: get user data:"),e.debug(i.userData),i.hasLoaded=!0})}angular.module("meetupModule").controller("ProfileDisplayController",e),e.$inject=["$log","$q","$resource","$routeParams"]}(),function(){"use strict";function e(e){return{restrict:"A",link:function(t,n,a){n.bind("click",function(){e.history.back()})}}}angular.module("meetupModule").directive("back",e),e.$inject=["$window"]}(),function(){"use strict";function e(){return{restrict:"E",transclude:!0,scope:{hassubmit:"=",submit:"&onSubmit",back:"&onBack",title:"="},templateUrl:"/Scripts/Directives/subpage-nav/subpage-nav.html"}}angular.module("meetupModule").directive("subpageNav",e)}(),function(){"use strict";angular.module("meetupModule").directive("loadingCircle",function(){return{restrict:"E",scope:{size:"="},templateUrl:"/Scripts/Directives/loading-circle/loading-circle.html"}})}(),function(){"use strict";function e(e,t){e.when("/index",{templateUrl:"/Scripts/Views/Meetup/Index.html"}).when("/Profile/:profileId",{templateUrl:"/Scripts/Views/Profile/profile-display.html"}).when("/Meetup/Create",{templateUrl:"/Scripts/Views/Meetup/Create.html"}).otherwise({redirectTo:"/index"}),t.html5Mode(!0)}angular.element(document.getElementsByTagName("head")).append(angular.element('<base href="'+window.location.pathname+'" />')),angular.module("meetupModule").config(e),e.$inject=["$routeProvider","$locationProvider"]}(),function(){"use strict";function e(e,t){return e.module("angularMoment",[]).constant("angularMomentConfig",{preprocess:null,timezone:"",format:null,statefulFilters:!0}).constant("moment",t).constant("amTimeAgoConfig",{withoutSuffix:!1,serverTime:null,titleFormat:null,fullDateThreshold:null,fullDateFormat:null}).directive("amTimeAgo",["$window","moment","amMoment","amTimeAgoConfig","angularMomentConfig",function(t,n,a,i,o){return function(r,l,s){function u(){var e;if(g)e=g;else if(i.serverTime){var t=(new Date).getTime(),a=t-k+i.serverTime;e=n(a)}else e=n();return e}function c(){h&&(t.clearTimeout(h),h=null)}function p(e){var n=u().diff(e,"day"),a=y&&n>=y;if(a?l.text(e.format(w)):l.text(e.from(u(),v)),$&&!l.attr("title")&&l.attr("title",e.local().format($)),!a){var i=Math.abs(u().diff(e,"minute")),o=3600;1>i?o=1:60>i?o=30:180>i&&(o=300),h=t.setTimeout(function(){p(e)},1e3*o)}}function d(e){C&&l.attr("datetime",e)}function m(){if(c(),f){var e=a.preprocessDate(f,D,b);p(e),d(e.toISOString())}}var f,g,h=null,b=o.format,v=i.withoutSuffix,$=i.titleFormat,y=i.fullDateThreshold,w=i.fullDateFormat,k=(new Date).getTime(),D=o.preprocess,x=s.amTimeAgo,C="TIME"===l[0].nodeName.toUpperCase();r.$watch(x,function(e){return"undefined"==typeof e||null===e||""===e?(c(),void(f&&(l.text(""),d(""),f=null))):(f=e,void m())}),e.isDefined(s.amFrom)&&r.$watch(s.amFrom,function(e){g="undefined"==typeof e||null===e||""===e?null:n(e),m()}),e.isDefined(s.amWithoutSuffix)&&r.$watch(s.amWithoutSuffix,function(e){"boolean"==typeof e?(v=e,m()):v=i.withoutSuffix}),s.$observe("amFormat",function(e){"undefined"!=typeof e&&(b=e,m())}),s.$observe("amPreprocess",function(e){D=e,m()}),s.$observe("amFullDateThreshold",function(e){y=e,m()}),s.$observe("amFullDateFormat",function(e){w=e,m()}),r.$on("$destroy",function(){c()}),r.$on("amMoment:localeChanged",function(){m()})}}]).service("amMoment",["moment","$rootScope","$log","angularMomentConfig",function(t,n,a,i){this.preprocessors={utc:t.utc,unix:t.unix},this.changeLocale=function(a,i){var o=t.locale(a,i);return e.isDefined(a)&&n.$broadcast("amMoment:localeChanged"),o},this.changeTimezone=function(e){i.timezone=e,n.$broadcast("amMoment:timezoneChanged")},this.preprocessDate=function(n,o,r){return e.isUndefined(o)&&(o=i.preprocess),this.preprocessors[o]?this.preprocessors[o](n,r):(o&&a.warn("angular-moment: Ignoring unsupported value for preprocess: "+o),!isNaN(parseFloat(n))&&isFinite(n)?t(parseInt(n,10)):t(n,r))},this.applyTimezone=function(e,t){return(t=t||i.timezone)?(t.match(/^Z|[+-]\d\d:?\d\d$/i)?e=e.utcOffset(t):e.tz?e=e.tz(t):a.warn("angular-moment: named timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js?"),e):e}}]).filter("amCalendar",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,a);var o=e(n);return o.isValid()?t.applyTimezone(o,i).calendar():""}return a.$stateful=n.statefulFilters,a}]).filter("amDifference",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i,o,r,l){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,r);var s=e(n);if(!s.isValid())return"";var u;if("undefined"==typeof a||null===a)u=e();else if(a=t.preprocessDate(a,l),u=e(a),!u.isValid())return"";return t.applyTimezone(s).diff(t.applyTimezone(u),i,o)}return a.$stateful=n.statefulFilters,a}]).filter("amDateFormat",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(a,i,o,r,l){var s=l||n.format;if("undefined"==typeof a||null===a)return"";a=t.preprocessDate(a,o,s);var u=e(a);return u.isValid()?t.applyTimezone(u,r).format(i):""}return a.$stateful=n.statefulFilters,a}]).filter("amDurationFormat",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e.duration(t,n).humanize(a)}return n.$stateful=t.statefulFilters,n}]).filter("amTimeAgo",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i,o){var r,l;return"undefined"==typeof n||null===n?"":(n=t.preprocessDate(n,a),r=e(n),r.isValid()?(l=e(o),"undefined"!=typeof o&&l.isValid()?t.applyTimezone(r).from(l,i):t.applyTimezone(r).fromNow(i)):"")}return a.$stateful=n.statefulFilters,a}]).filter("amSubtract",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e(t).subtract(parseInt(n,10),a)}return n.$stateful=t.statefulFilters,n}]).filter("amAdd",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e(t).add(parseInt(n,10),a)}return n.$stateful=t.statefulFilters,n}])}"function"==typeof define&&define.amd?define(["angular","moment"],e):"undefined"!=typeof module&&module&&module.exports?(e(angular,require("moment")),module.exports="angularMoment"):e(angular,("undefined"!=typeof global?global:window).moment)}(),+function(e,t){function n(n,a){function i(){var e='<div class="input-group"><span class="input-group-btn"><button data-toggle="collapse" href="#'+a.mapContainerId+'" class="btn btn-default"><span class="glyphicon glyphicon-globe"></span></button></span></div>';return e}function o(){if(a.mapContainerId){var t=e(n),o=t.parent(),r=o.children().index(n);t.replaceWith(i()),o.children().eq(r).append(n)}}function r(e){if(e){var t={query:e};w&&w.textSearch(t,function(e,t){if(t===google.maps.places.PlacesServiceStatus.OK)for(var n=0;n<e.length;n++)return void m(e[n])})}}function l(e){y.geocode({latLng:e},function(e,t){if(t===google.maps.GeocoderStatus.OK&&e[0]){var n=e[0];m(n,!1)}})}function s(){return g=e(a.map).get(0),g||a.mapContainerId&&(g=e("#"+a.mapContainerId+" .placepicker-map").get(0)),!!g}function u(){s()&&(h=new google.maps.Map(g,a.mapOptions),v.bindTo("bounds",h),google.maps.event.addListener(h,"click",function(e){var t=e.latLng;b.setPosition(t),h.panTo(t),n.blur(),l(t)}),b=new google.maps.Marker({map:h}),w=new google.maps.places.PlacesService(h),e(g).parent().on("show.bs.collapse",function(t){e(t.target).css("display","block").find('img[src*="gstatic.com/"], img[src*="googleapis.com/"]').css("max-width","none"),n.value?$.resize():$.geoLocation(),e(t.target).css("display","")}))}function c(){v=new google.maps.places.Autocomplete(n,a.autoCompleteOptions),google.maps.event.addListener(v,"place_changed",function(){var e=v.getPlace();e.geometry&&m(e)})}function p(){$.resize.call($)}function d(){if(y=new google.maps.Geocoder,o(),c(),u(),n.value)r(n.value);else{var i=a.latitude||e(a.latitudeInput).prop("value"),l=a.longitude||e(a.longitudeInput).prop("value");i&&l&&$.setLocation(i,l)}e(t).on("resize",p),e(n).on("keypress",function(e){a.preventSubmit&&13===e.keyCode&&(e.preventDefault(),e.stopImmediatePropagation())})}function m(t,i){i="undefined"==typeof i,k=t,$.resize();var o=t.geometry.location;i&&f(o),e(a.latitudeInput).prop("value",o.lat()),e(a.longitudeInput).prop("value",o.lng()),i||(n.value=t.formatted_address),"function"==typeof a.placeChanged&&a.placeChanged.call($,t)}function f(e){if(h){h.setCenter(e);var t=a.icon||a.placesIcon&&place.icon?place.icon:null;if(t){var n={url:t,size:new google.maps.Size(71,71),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(35,35)};b.setIcon(n)}b.setPosition(e),b.setVisible(!0)}}var g,h,b,v,$=this,y=null,w=null,k=null,D=null;this.setValue=function(e){n.value=e,r(e)},this.getValue=function(){return n.value},this.setLocation=function(e,t){var n=new google.maps.LatLng(e,t);this.setLatLng(n)},this.getLocation=function(){var e=this.getLatLng();return{latitude:e&&e.lat()||a.latitude,longitude:e&&e.lng()||a.longitude}},this.setLatLng=function(e){D=e,l(D)},this.getLatLng=function(){return k&&k.geometry?k.geometry.location:D},this.getMap=function(){return h},this.reload=function(){h&&r(n.value)},this.resize=function(){if(h){var e=h.getCenter();google.maps.event.trigger(h,"resize"),h.setCenter(e)}},this.geoLocation=function(e){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){var n=new google.maps.LatLng(t.coords.latitude,t.coords.longitude);f(n),l(n),e&&e(n)},function(){e&&e(null)}):e&&e(null)},d.call(this)}var a="placepicker",i={map:"",mapOptions:{zoom:15},places:{icons:!1},autoCompleteOptions:{},placeChanged:null,location:null,preventSubmit:!0},o=n;e.fn[a]=function(t){return this.each(function(){return e(this).data(a)||e(this).data(a,new o(this,e.extend({},i,t,e(this).data()))),e(this)})}}(jQuery,window),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/popup.html","uib/template/datepicker/year.html","uib/template/modal/backdrop.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,a){var i=a.has("$animateCss")?a.get("$animateCss"):null;return{link:function(a,o,r){function l(){o.hasClass("collapse")&&o.hasClass("in")||t.resolve(p(a)).then(function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",to:{height:o[0].scrollHeight+"px"}}).start()["finally"](s):e.addClass(o,"in",{to:{height:o[0].scrollHeight+"px"}}).then(s)})}function s(){o.removeClass("collapsing").addClass("collapse").css({height:"auto"}),d(a)}function u(){return o.hasClass("collapse")||o.hasClass("in")?void t.resolve(m(a)).then(function(){o.css({height:o[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:{height:"0"}}).start()["finally"](c):e.removeClass(o,"in",{to:{height:"0"}}).then(c)}):c()}function c(){o.css({height:"0"}),o.removeClass("collapsing").addClass("collapse"),f(a)}var p=n(r.expanding),d=n(r.expanded),m=n(r.collapsing),f=n(r.collapsed);a.$eval(r.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css({height:"auto"}),a.$watch(r.uibCollapse,function(e){e?u():l()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(n){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",function(n){t.toggleClass(e.openClass,!!n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:"^uibAccordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.uibAccordionTransclude]},function(e){if(e){var n=angular.element(t[0].querySelector("[uib-accordion-header]"));n.html(""),n.append(e)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$attrs","$interpolate","$timeout",function(e,t,n,a){e.closeable=!!t.close;var i=angular.isDefined(t.dismissOnTimeout)?n(t.dismissOnTimeout)(e.$parent):null;i&&a(function(){e.close()},parseInt(i,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,a,i){var o=i[0],r=i[1],l=e(a.uibUncheckable);n.find("input").css({display:"none"}),r.$render=function(){n.toggleClass(o.activeClass,angular.equals(r.$modelValue,t.$eval(a.uibBtnRadio)))},n.on(o.toggleEvent,function(){if(!a.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(a.uncheckable)||t.$apply(function(){r.$setViewValue(e?null:t.$eval(a.uibBtnRadio)),r.$render()})}}),a.uibUncheckable&&t.$watch(l,function(e){a.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,a){function i(){return r(n.btnCheckboxTrue,!0)}function o(){return r(n.btnCheckboxFalse,!1)}function r(t,n){return angular.isDefined(t)?e.$eval(t):n}var l=a[0],s=a[1];t.find("input").css({display:"none"}),s.$render=function(){t.toggleClass(l.activeClass,angular.equals(s.$modelValue,i()))},t.on(l.toggleEvent,function(){n.disabled||e.$apply(function(){s.$setViewValue(t.hasClass(l.activeClass)?o():i()),s.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,a,i){function o(){for(;$.length;)$.shift()}function r(e){for(var t=0;t<h.length;t++)h[t].slide.active=t===e}function l(n,a,s){if(!y){if(angular.extend(n,{direction:s}),angular.extend(h[v].slide||{},{direction:s}),i.enabled(t)&&!e.$currentTransition&&h[a].element&&g.slides.length>1){h[a].element.data(b,n.direction);var u=g.getCurrentIndex();angular.isNumber(u)&&h[u].element&&h[u].element.data(b,n.direction),e.$currentTransition=!0,i.on("addClass",h[a].element,function(t,n){if("close"===n&&(e.$currentTransition=null,i.off("addClass",t),$.length)){var a=$.pop().slide,r=a.index,s=r>g.getCurrentIndex()?"next":"prev";o(),l(a,r,s)}})}e.active=n.index,v=n.index,r(a),p()}}function s(e){for(var t=0;t<h.length;t++)if(h[t].slide===e)return t}function u(){m&&(n.cancel(m),m=null)}function c(t){t.length||(e.$currentTransition=null,o())}function p(){u();var t=+e.interval;!isNaN(t)&&t>0&&(m=n(d,t))}function d(){var t=+e.interval;f&&!isNaN(t)&&t>0&&h.length?e.next():e.pause()}var m,f,g=this,h=g.slides=e.slides=[],b="uib-slideDirection",v=e.active,$=[],y=!1;g.addSlide=function(t,n){h.push({slide:t,element:n}),h.sort(function(e,t){return+e.slide.index>+t.slide.index}),(t.index===e.active||1===h.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),v=t.index,e.active=t.index,r(v),g.select(h[s(t)]),1===h.length&&e.play())},g.getCurrentIndex=function(){for(var e=0;e<h.length;e++)if(h[e].slide.index===v)return e},g.next=e.next=function(){var t=(g.getCurrentIndex()+1)%h.length;return 0===t&&e.noWrap()?void e.pause():g.select(h[t],"next")},g.prev=e.prev=function(){var t=g.getCurrentIndex()-1<0?h.length-1:g.getCurrentIndex()-1;return e.noWrap()&&t===h.length-1?void e.pause():g.select(h[t],"prev")},g.removeSlide=function(t){var n=s(t),a=$.indexOf(h[n]);-1!==a&&$.splice(a,1),h.splice(n,1),h.length>0&&v===n?n>=h.length?(v=h.length-1,e.active=v,r(v),g.select(h[h.length-1])):(v=n,e.active=v,r(v),g.select(h[n])):v>n&&(v--,e.active=v),0===h.length&&(v=null,e.active=null,o())},g.select=e.select=function(t,n){var a=s(t.slide);void 0===n&&(n=a>g.getCurrentIndex()?"next":"prev"),t.slide.index===v||e.$currentTransition?t&&t.slide.index!==v&&e.$currentTransition&&$.push(h[a]):l(t.slide,a,n)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.pause=function(){e.noPause||(f=!1,u())},e.play=function(){f||(f=!0,p())},e.$on("$destroy",function(){y=!0,u()}),e.$watch("noTransition",function(e){i.enabled(t,!e)}),e.$watch("interval",p),e.$watchCollection("slides",c),e.$watch("active",function(e){if(angular.isNumber(e)&&v!==e){for(var t=0;t<h.length;t++)if(h[t].slide.index===e){e=t;break}var n=h[e];n&&(v=e,r(e),g.select(h[e]))}})}]).directive("uibCarousel",function(){return{transclude:!0,replace:!0,controller:"UibCarouselController",controllerAs:"carousel",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",function(){return{require:"^uibCarousel",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)})}}}).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}var n="uib-slideDirection";return{beforeAddClass:function(a,i,o){if("active"===i){var r=!1,l=a.data(n),s="next"===l?"left":"right",u=t.bind(this,a,s+" "+l,o);return a.addClass(l),e(a,{addClass:s}).start().done(u),function(){r=!0}}o()},beforeRemoveClass:function(a,i,o){if("active"===i){var r=!1,l=a.data(n),s="next"===l?"left":"right",u=t.bind(this,a,s,o);return e(a,{addClass:s}).start().done(u),function(){r=!0}}o()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter",function(e,t,n,a){function i(e,t){var n=[],i=e.split(""),o=e.indexOf("'");if(o>-1){var r=!1;e=e.split("");for(var l=o;l<e.length;l++)r?("'"===e[l]&&(l+1<e.length&&"'"===e[l+1]?(e[l+1]="$",i[l+1]=""):(i[l]="",r=!1)),e[l]="$"):"'"===e[l]&&(e[l]="$",i[l]="",r=!0);e=e.join("")}return angular.forEach(m,function(a){var o=e.indexOf(a.key);if(o>-1){e=e.split(""),i[o]="("+a.regex+")",e[o]="$";for(var r=o+1,l=o+a.key.length;l>r;r++)i[r]="",e[r]="$";e=e.join(""),n.push({index:o,key:a.key,apply:a[t],matcher:a.regex})}}),{regex:new RegExp("^"+i.join("")+"$"),map:a(n,"index")}}function o(e,t,n){return 1>n?!1:1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}function r(e){return parseInt(e,10)}function l(e,t){return e&&t?p(e,t):e}function s(e,t){return e&&t?p(e,t,!0):e}function u(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function c(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function p(e,t,n){n=n?-1:1;var a=u(t,e.getTimezoneOffset());return c(e,n*(a-e.getTimezoneOffset()))}var d,m,f=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){d=t.id,this.parsers={},this.formatters={},m=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){this.year=+e+2e3},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){var t=e.getMonth();return/^[0-9]$/.test(t)?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){var t=e.getDate();return/^[1-9]$/.test(t)?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],a=t[2],i=t[3];this.hours+=r(n+a),this.minutes+=r(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}]},this.init(),this.filter=function(e,n){if(!angular.isDate(e)||isNaN(e)||!n)return"";n=t.DATETIME_FORMATS[n]||n,t.id!==d&&this.init(),this.formatters[n]||(this.formatters[n]=i(n,"formatter"));var a=this.formatters[n],o=a.map,r=n;return o.reduce(function(t,n,a){var i=r.match(new RegExp("(.*)"+n.key));i&&angular.isString(i[1])&&(t+=i[1],r=r.replace(i[1]+n.key,""));var l=a===o.length-1?r:"";return n.apply?t+n.apply.call(null,e)+l:t+l},"")},this.parse=function(n,a,r){if(!angular.isString(n)||!a)return n;a=t.DATETIME_FORMATS[a]||a,a=a.replace(f,"\\$&"),t.id!==d&&this.init(),this.parsers[a]||(this.parsers[a]=i(a,"apply"));var l=this.parsers[a],s=l.regex,u=l.map,c=n.match(s),p=!1;if(c&&c.length){var m,g;angular.isDate(r)&&!isNaN(r.getTime())?m={year:r.getFullYear(),month:r.getMonth(),date:r.getDate(),hours:r.getHours(),minutes:r.getMinutes(),seconds:r.getSeconds(),milliseconds:r.getMilliseconds()}:(r&&e.warn("dateparser:","baseDate is not a valid date"),m={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var h=1,b=c.length;b>h;h++){var v=u[h-1];"Z"===v.matcher&&(p=!0),v.apply&&v.apply.call(m,c[h])}var $=p?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,y=p?Date.prototype.setUTCHours:Date.prototype.setHours;return o(m.year,m.month,m.date)&&(!angular.isDate(r)||isNaN(r.getTime())||p?(g=new Date(0),$.call(g,m.year,m.month,m.date),y.call(g,m.hours||0,m.minutes||0,m.seconds||0,m.milliseconds||0)):(g=new Date(r),$.call(g,m.year,m.month,m.date),y.call(g,m.hours,m.minutes,m.seconds,m.milliseconds))),g}},this.toTimezone=l,this.fromTimezone=s,this.timezoneToOffset=u,this.addDateMinutes=c,this.convertTimezoneToLocal=p}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,n=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(a,i){function o(e,t,n){s.push(e),u.push({scope:e,element:t}),f.forEach(function(t,n){r(t,e)}),e.$on("$destroy",l)}function r(t,a){var i=t.match(n),o=a.$eval(i[1]),r=i[2],l=c[t];if(!l){var s=function(t){var n=null;u.some(function(e){var a=e.scope.$eval(d);return a===t?(n=e,!0):void 0}),l.lastActivated!==n&&(l.lastActivated&&e.removeClass(l.lastActivated.element,o),n&&e.addClass(n.element,o),l.lastActivated=n)};c[t]=l={lastActivated:null,
scope:a,watchFn:s,compareWithExp:r,watcher:a.$watch(r,s)}}l.watchFn(a.$eval(r))}function l(e){var t=e.targetScope,n=s.indexOf(t);if(s.splice(n,1),u.splice(n,1),s.length){var a=s[0];angular.forEach(c,function(e){e.scope===t&&(e.watcher=a.$watch(e.compareWithExp,e.watchFn),e.scope=a)})}else c={}}var s=[],u=[],c={},p=i.uibIsClass.match(t),d=p[2],m=p[1],f=m.split(",");return o}}}]),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,a={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},i={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/};return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){function a(e){return"static"===(t.getComputedStyle(e).position||"static")}n=this.getRawNode(n);for(var i=n.offsetParent||e[0].documentElement;i&&i!==e[0].documentElement&&a(i);)i=i.offsetParent;return i||e[0].documentElement},scrollbarWidth:function(){if(angular.isUndefined(n)){var t=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(t),n=t[0].offsetWidth-t[0].clientWidth,n=isFinite(n)?n:0,t.remove()}return n},isScrollable:function(e,n){e=this.getRawNode(e);var i=n?a.hidden:a.normal,o=t.getComputedStyle(e);return i.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,i){n=this.getRawNode(n);var o=i?a.hidden:a.normal,r=e[0].documentElement,l=t.getComputedStyle(n),s="absolute"===l.position,u=n.parentElement||r;if(u===r||"fixed"===l.position)return r;for(;u.parentElement&&u!==r;){var c=t.getComputedStyle(u);if(s&&"static"!==c.position&&(s=!1),!s&&o.test(c.overflow+c.overflowY+c.overflowX))break;u=u.parentElement}return u},position:function(n,a){n=this.getRawNode(n);var i=this.offset(n);if(a){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var r=this.offsetParent(n),l={top:0,left:0};return r!==e[0].documentElement&&(l=this.offset(r),l.top+=r.clientTop-r.scrollTop,l.left+=r.clientLeft-r.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-l.top),left:Math.round(i.left-l.left)}},offset:function(n){n=this.getRawNode(n);var a=n.getBoundingClientRect();return{width:Math.round(angular.isNumber(a.width)?a.width:n.offsetWidth),height:Math.round(angular.isNumber(a.height)?a.height:n.offsetHeight),top:Math.round(a.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(a.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,a,i){n=this.getRawNode(n),i=i!==!1;var o=n.getBoundingClientRect(),r={top:0,left:0,bottom:0,right:0},l=a?e[0].documentElement:this.scrollParent(n),s=l.getBoundingClientRect();if(r.top=s.top+l.clientTop,r.left=s.left+l.clientLeft,l===e[0].documentElement&&(r.top+=t.pageYOffset,r.left+=t.pageXOffset),r.bottom=r.top+l.clientHeight,r.right=r.left+l.clientWidth,i){var u=t.getComputedStyle(l);r.top+=this.parseStyle(u.paddingTop),r.bottom-=this.parseStyle(u.paddingBottom),r.left+=this.parseStyle(u.paddingLeft),r.right-=this.parseStyle(u.paddingRight)}return{top:Math.round(o.top-r.top),bottom:Math.round(r.bottom-o.bottom),left:Math.round(o.left-r.left),right:Math.round(r.right-o.right)}},parsePlacement:function(e){var t=i.auto.test(e);return t&&(e=e.replace(i.auto,"")),e=e.split("-"),e[0]=e[0]||"top",i.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",i.secondary.test(e[1])||(e[1]="center"),t?e[2]=!0:e[2]=!1,e},positionElements:function(e,n,a,o){e=this.getRawNode(e),n=this.getRawNode(n);var r=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),l=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");a=this.parsePlacement(a);var s=o?this.offset(e):this.position(e),u={top:0,left:0,placement:""};if(a[2]){var c=this.viewportOffset(e,o),p=t.getComputedStyle(n),d={width:r+Math.round(Math.abs(this.parseStyle(p.marginLeft)+this.parseStyle(p.marginRight))),height:l+Math.round(Math.abs(this.parseStyle(p.marginTop)+this.parseStyle(p.marginBottom)))};if(a[0]="top"===a[0]&&d.height>c.top&&d.height<=c.bottom?"bottom":"bottom"===a[0]&&d.height>c.bottom&&d.height<=c.top?"top":"left"===a[0]&&d.width>c.left&&d.width<=c.right?"right":"right"===a[0]&&d.width>c.right&&d.width<=c.left?"left":a[0],a[1]="top"===a[1]&&d.height-s.height>c.bottom&&d.height-s.height<=c.top?"bottom":"bottom"===a[1]&&d.height-s.height>c.top&&d.height-s.height<=c.bottom?"top":"left"===a[1]&&d.width-s.width>c.right&&d.width-s.width<=c.left?"right":"right"===a[1]&&d.width-s.width>c.left&&d.width-s.width<=c.right?"left":a[1],"center"===a[1])if(i.vertical.test(a[0])){var m=s.width/2-r/2;c.left+m<0&&d.width-s.width<=c.right?a[1]="left":c.right+m<0&&d.width-s.width<=c.left&&(a[1]="right")}else{var f=s.height/2-d.height/2;c.top+f<0&&d.height-s.height<=c.bottom?a[1]="top":c.bottom+f<0&&d.height-s.height<=c.top&&(a[1]="bottom")}}switch(a[0]){case"top":u.top=s.top-l;break;case"bottom":u.top=s.top+s.height;break;case"left":u.left=s.left-r;break;case"right":u.left=s.left+s.width}switch(a[1]){case"top":u.top=s.top;break;case"bottom":u.top=s.top+s.height-l;break;case"left":u.left=s.left;break;case"right":u.left=s.left+s.width-r;break;case"center":i.vertical.test(a[0])?u.left=s.left+s.width/2-r/2:u.top=s.top+s.height/2-l/2}return u.top=Math.round(u.top),u.left=Math.round(u.left),u.placement="center"===a[1]?a[0]:a[0]+"-"+a[1],u},positionArrow:function(e,n){e=this.getRawNode(e);var a=e.querySelector(".tooltip-inner, .popover-inner");if(a){var o=angular.element(a).hasClass("tooltip-inner"),r=o?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(r){var l={top:"",bottom:"",left:"",right:""};if(n=this.parsePlacement(n),"center"===n[1])return void angular.element(r).css(l);var s="border-"+n[0]+"-width",u=t.getComputedStyle(r)[s],c="border-";c+=i.vertical.test(n[0])?n[0]+"-"+n[1]:n[1]+"-"+n[0],c+="-radius";var p=t.getComputedStyle(o?a:e)[c];switch(n[0]){case"top":l.bottom=o?"0":"-"+u;break;case"bottom":l.top=o?"0":"-"+u;break;case"left":l.right=o?"0":"-"+u;break;case"right":l.left=o?"0":"-"+u}l[n[1]]=p,angular.element(r).css(l)}}}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).value("uibDatepickerAttributeWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerSuppressError","uibDatepickerAttributeWarning","uibDateParser",function(e,t,n,a,i,o,r,l,s,u,c){function p(t){e.datepickerMode=t,h&&(e.datepickerOptions.datepickerMode=t)}var d=this,m={$setViewValue:angular.noop},f={},g=[],h=!!t.datepickerOptions;if(this.modes=["day","month","year"],h)["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","initDate","maxDate","maxMode","minDate","minMode","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:l.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":d[t]=angular.isDefined(e.datepickerOptions[t])?a(e.datepickerOptions[t])(e.$parent):l[t];break;case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":d[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:l[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?d.startingDay=e.datepickerOptions.startingDay:angular.isNumber(l.startingDay)?d.startingDay=l.startingDay:d.startingDay=(i.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(e){e?angular.isDate(e)?d[t]=c.fromTimezone(new Date(e),f.timezone):d[t]=new Date(r(e,"medium")):d[t]=null,d.refreshView()}):d[t]=l[t]?c.fromTimezone(new Date(l[t]),f.timezone):null;break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(n){d[t]=e[t]=angular.isDefined(n)?n:datepickerOptions[t],("minMode"===t&&d.modes.indexOf(e.datepickerOptions.datepickerMode)<d.modes.indexOf(d[t])||"maxMode"===t&&d.modes.indexOf(e.datepickerOptions.datepickerMode)>d.modes.indexOf(d[t]))&&(e.datepickerMode=d[t],e.datepickerOptions.datepickerMode=d[t])}):d[t]=e[t]=l[t]||null;break;case"initDate":e.datepickerOptions.initDate?(d.activeDate=c.fromTimezone(e.datepickerOptions.initDate,f.timezone)||new Date,e.$watch(function(){return e.datepickerOptions.initDate},function(e){e&&(m.$isEmpty(m.$modelValue)||m.$invalid)&&(d.activeDate=c.fromTimezone(e,f.timezone),d.refreshView())})):d.activeDate=new Date}});else{if(angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle"],function(n){d[n]=angular.isDefined(t[n])?a(t[n])(e.$parent):l[n],angular.isDefined(t[n])&&u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.forEach(["showWeeks","yearRows","yearColumns","shortcutPropagation"],function(n){d[n]=angular.isDefined(t[n])?e.$parent.$eval(t[n]):l[n],angular.isDefined(t[n])&&u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.forEach(["dateDisabled","customClass"],function(e){angular.isDefined(t[e])&&u&&o.warn("uib-datepicker "+e+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.isDefined(t.startingDay)?(u&&o.warn("uib-datepicker startingDay attribute usage is deprecated, use datepicker-options attribute instead"),d.startingDay=e.$parent.$eval(t.startingDay)):angular.isNumber(l.startingDay)?d.startingDay=l.startingDay:d.startingDay=(i.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7,angular.forEach(["minDate","maxDate"],function(n){t[n]?(u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead"),g.push(e.$parent.$watch(t[n],function(e){e?angular.isDate(e)?d[n]=c.fromTimezone(new Date(e),f.timezone):d[n]=new Date(r(e,"medium")):d[n]=null,d.refreshView()}))):d[n]=l[n]?c.fromTimezone(new Date(l[n]),f.timezone):null}),angular.forEach(["minMode","maxMode"],function(n){t[n]?(u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead"),g.push(e.$parent.$watch(t[n],function(a){d[n]=e[n]=angular.isDefined(a)?a:t[n],("minMode"===n&&d.modes.indexOf(e.datepickerMode)<d.modes.indexOf(d[n])||"maxMode"===n&&d.modes.indexOf(e.datepickerMode)>d.modes.indexOf(d[n]))&&(e.datepickerMode=d[n])}))):d[n]=e[n]=l[n]||null}),angular.isDefined(t.initDate)){u&&o.warn("uib-datepicker initDate attribute usage is deprecated, use datepicker-options attribute instead");var b=c.fromTimezone(e.$parent.$eval(t.initDate),f.timezone);this.activeDate=isNaN(b)?new Date:b,g.push(e.$parent.$watch(t.initDate,function(e){e&&(m.$isEmpty(m.$modelValue)||m.$invalid)&&(e=c.fromTimezone(e,f.timezone),d.activeDate=isNaN(e)?new Date:e,d.refreshView())}))}else this.activeDate=new Date;t.datepickerMode&&u&&o.warn("uib-datepicker datepickerMode attribute usage is deprecated, use datepicker-options attribute instead"),e.datepickerMode=e.datepickerMode||l.datepickerMode}e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(t.disabled)||!1,angular.isDefined(t.ngDisabled)&&g.push(e.$parent.$watch(t.ngDisabled,function(t){e.disabled=t,d.refreshView()})),e.isActive=function(t){return 0===d.compare(t.date,d.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){m=e,f=e.$options||l.ngModelOptions,this.activeDate=m.$modelValue?c.fromTimezone(new Date(m.$modelValue),f.timezone):c.fromTimezone(new Date,f.timezone),m.$render=function(){d.render()}},this.render=function(){if(m.$viewValue){var e=new Date(m.$viewValue),t=!isNaN(e);t?this.activeDate=c.fromTimezone(e,f.timezone):s||o.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=m.$viewValue?new Date(m.$viewValue):null;t=c.fromTimezone(t,f.timezone),m.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var a=m.$viewValue?new Date(m.$viewValue):null;a=c.fromTimezone(a,f.timezone);var i=new Date;i=c.fromTimezone(i,f.timezone);var o=this.compare(t,i),r={date:t,label:c.filter(t,n),selected:a&&0===this.compare(t,a),disabled:this.isDisabled(t),past:0>o,current:0===o,future:o>0,customClass:this.customClass(t)||null};return a&&0===this.compare(t,a)&&(e.selectedDt=r),d.activeDate&&0===this.compare(r.date,d.activeDate)&&(e.activeDt=r),r},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===d.minMode){var n=m.$viewValue?c.fromTimezone(new Date(m.$viewValue),f.timezone):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=c.toTimezone(n,f.timezone),m.$setViewValue(n),m.$render()}else d.activeDate=t,p(d.modes[d.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode")},e.move=function(e){var t=d.activeDate.getFullYear()+e*(d.step.years||0),n=d.activeDate.getMonth()+e*(d.step.months||0);d.activeDate.setFullYear(t,n,1),d.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===d.maxMode&&1===t||e.datepickerMode===d.minMode&&-1===t||(p(d.modes[d.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var v=function(){d.element[0].focus()};e.$on("uib:datepicker.focus",v),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),d.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(d.isDisabled(d.activeDate))return;e.select(d.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(d.handleKeyDown(n,t),d.refreshView()):e.toggleMode("up"===n?1:-1)},e.$on("$destroy",function(){for(;g.length;)g.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?o[t]:29}function i(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}var o=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,a=new Array(t),i=new Date(e),o=0;t>o;)n=new Date(i),a[o++]=n,i.setDate(i.getDate()+1);return a},this._refreshView=function(){var t=this.activeDate.getFullYear(),a=this.activeDate.getMonth(),o=new Date(this.activeDate);o.setFullYear(t,a,1);var r=this.startingDay-o.getDay(),l=r>0?7-r:-r,s=new Date(o);l>0&&s.setDate(-l+1);for(var u=this.getDates(s,42),c=0;42>c;c++)u[c]=angular.extend(this.createDateObject(u[c],this.formatDay),{secondary:u[c].getMonth()!==a,uid:e.uniqueId+"-"+c});e.labels=new Array(7);for(var p=0;7>p;p++)e.labels[p]={abbr:n(u[p].date,this.formatDayHeader),full:n(u[p].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(u,7),e.showWeeks){e.weekNumbers=[];for(var d=(11-this.startingDay)%7,m=e.rows.length,f=0;m>f;f++)e.weekNumbers.push(i(e.rows[f][d].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var i=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(i,1),n=Math.min(a(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=a(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,a=new Array(12),i=this.activeDate.getFullYear(),o=0;12>o;o++)t=new Date(this.activeDate),t.setFullYear(i,o,1),a[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(a,3)},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),a=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=3;else if("right"===e)n+=1;else if("down"===e)n+=3;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(a)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e){return parseInt((e-1)/o,10)*o+1}var i,o;this.element=t,this.yearpickerInit=function(){i=this.yearColumns,o=this.yearRows*i,this.step={years:o}},this._refreshView=function(){for(var t,n=new Array(o),r=0,l=a(this.activeDate.getFullYear());o>r;r++)t=new Date(this.activeDate),t.setFullYear(l+r,0,1),n[r]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=this.split(n,i),e.columns=i},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=i:"right"===e?n+=1:"down"===e?n+=i:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*o:"home"===e?n=a(this.activeDate.getFullYear()):"end"===e&&(n=a(this.activeDate.getFullYear())+o-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",datepickerOptions:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["uibDatepicker","^ngModel"],controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("uibDaypicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],controller:"UibDaypickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibMonthpicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],controller:"UibMonthpickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibYearpicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],controller:"UibYearpickerController",link:function(e,t,n,a){var i=a[0];angular.extend(i,a[1]),i.yearpickerInit(),i.refreshView()}}}).value("uibDatepickerPopupAttributeWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepicker/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","uibDatepickerPopupAttributeWarning",function(e,t,n,a,i,o,r,l,s,u,c,p,d,m,f,g){function h(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function b(t){var n=p.parse(t,D,e.date);if(isNaN(n))for(var a=0;a<F.length;a++)if(n=p.parse(t,F[a],e.date),!isNaN(n))return n;return n}function v(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=b(e);if(!isNaN(t))return p.toTimezone(t,U.timezone)}return E.$options&&E.$options.allowInvalid?e:void 0}function $(e,t){var a=e||t;return n.ngRequired||a?(angular.isNumber(a)&&(a=new Date(a)),a?angular.isDate(a)&&!isNaN(a)?!0:angular.isString(a)?!isNaN(b(t)):!1:!0):!0}function y(n){if(e.isOpen||!e.disabled){var a=A[0],i=t[0].contains(n.target),o=void 0!==a.contains&&a.contains(n.target);!e.isOpen||i||o||e.$apply(function(){e.isOpen=!1})}}function w(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!1}),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!0}))}function k(){if(e.isOpen){var a=angular.element(A[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:d.placement,o=u.positionElements(t,a,i,C);a.css({top:o.top+"px",left:o.left+"px"}),a.hasClass("uib-position-measure")&&a.removeClass("uib-position-measure")}}var D,x,C,M,T,O,S,P,I,E,U,A,F,N={},z=!1,V=[];e.watchData={},this.init=function(u){if(E=u,U=u.$options||f.ngModelOptions,x=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):d.closeOnDateSelection,C=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):d.appendToBody,M=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):d.onOpenFocus,T=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,O=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:d.datepickerTemplateUrl,F=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):d.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):d.showButtonBar,d.html5Types[n.type]?(D=d.html5Types[n.type],z=!0):(D=n.uibDatepickerPopup||d.datepickerPopup,n.$observe("uibDatepickerPopup",function(e,t){var n=e||d.datepickerPopup;if(n!==D&&(D=n,E.$modelValue=null,!D))throw new Error("uibDatepickerPopup must have a date format specified.")})),!D)throw new Error("uibDatepickerPopup must have a date format specified.");if(z&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");S=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),e.ngModelOptions=angular.copy(U),e.ngModelOptions.timezone=null,e.ngModelOptions.updateOnDefault===!0&&(e.ngModelOptions.updateOn=e.ngModelOptions.updateOn?e.ngModelOptions.updateOn+" default":"default"),S.attr({"ng-model":"date","ng-model-options":"ngModelOptions","ng-change":"dateSelection(date)","template-url":T}),P=angular.element(S.children()[0]),P.attr("template-url",O),z&&"month"===n.type&&(P.attr("datepicker-mode",'"month"'),P.attr("min-mode","month")),e.datepickerOptions&&P.attr("datepicker-options","datepickerOptions"),angular.forEach(["minMode","maxMode","datepickerMode","shortcutPropagation"],function(t){if(n[t]){g&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var a=o(n[t]),r={get:function(){return a(e.$parent)}};if(P.attr(h(t),"watchData."+t),"datepickerMode"===t){var l=a.assign;r.set=function(t){l(e.$parent,t)}}Object.defineProperty(e.watchData,t,r)}}),angular.forEach(["minDate","maxDate","initDate"],function(t){if(n[t]){g&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var a=o(n[t]);V.push(e.$parent.$watch(a,function(n){if("minDate"===t||"maxDate"===t)null===n?N[t]=null:angular.isDate(n)?N[t]=p.fromTimezone(new Date(n),U.timezone):N[t]=new Date(c(n,"medium")),e.watchData[t]=null===n?null:N[t];else{var a=n?new Date(n):new Date;e.watchData[t]=p.fromTimezone(a,U.timezone)}})),P.attr(h(t),"watchData."+t)}}),n.dateDisabled&&(g&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr("date-disabled","dateDisabled({ date: date, mode: mode })")),angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRows","yearColumns"],function(e){angular.isDefined(n[e])&&(g&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr(h(e),n[e]))}),n.customClass&&(g&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr("custom-class","customClass({ date: date, mode: mode })")),z?E.$formatters.push(function(t){return e.date=p.fromTimezone(t,U.timezone),t}):(E.$$parserName="date",E.$validators.date=$,E.$parsers.unshift(v),E.$formatters.push(function(t){return E.$isEmpty(t)?(e.date=t,t):(e.date=p.fromTimezone(t,U.timezone),angular.isNumber(e.date)&&(e.date=new Date(e.date)),p.filter(e.date,D))})),E.$viewChangeListeners.push(function(){e.date=b(E.$viewValue)}),t.on("keydown",w),A=a(S)(e),S.remove(),C?l.find("body").append(A):t.after(A),e.$on("$destroy",function(){for(e.isOpen===!0&&(s.$$phase||e.$apply(function(){e.isOpen=!1})),A.remove(),t.off("keydown",w),l.off("click",y),I&&I.off("scroll",k),angular.element(r).off("resize",k);V.length;)V.shift()()})},e.getText=function(t){return e[t+"Text"]||d[t+"Text"]},e.isDisabled=function(t){return"today"===t&&(t=p.fromTimezone(new Date,U.timezone)),e.datepickerOptions?e.datepickerOptions&&e.datepickerOptions.minDate&&e.compare(t,e.datepickerOptions.minDate)<0||e.datepickerOptions.maxDate&&e.compare(t,e.datepickerOptions.maxDate)>0:e.watchData.minDate&&e.compare(t,N.minDate)<0||e.watchData.maxDate&&e.compare(t,N.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){angular.isDefined(n)&&(e.date=n);var a=e.date?p.filter(e.date,D):null;t.val(a),E.$setViewValue(a),x&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var a=new Date;angular.isDate(e.date)?(t=new Date(e.date),t.setFullYear(a.getFullYear(),a.getMonth(),a.getDate())):t=new Date(a.setHours(0,0,0,0))}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&V.push(e.$parent.$watch(o(n.ngDisabled),function(t){e.disabled=t})),e.$watch("isOpen",function(a){a?e.disabled?e.isOpen=!1:m(function(){k(),M&&e.$broadcast("uib:datepicker.focus"),l.on("click",y);var a=n.popupPlacement?n.popupPlacement:d.placement;C||u.parsePlacement(a)[2]?(I=I||angular.element(u.scrollParent(t)),I&&I.on("scroll",k)):I=null,angular.element(r).on("resize",k)},0,!1):(l.off("click",y),I&&I.off("scroll",k),angular.element(r).off("resize",k))}),e.$on("uib:datepicker.mode",function(){m(k,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var a;return function(){var i=this,o=Array.prototype.slice.call(arguments);a&&e.cancel(a),a=e(function(){t.apply(i,o)},n)}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t){n||(e.on("click",a),e.on("keydown",i)),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t){n===t&&(n=null,e.off("click",a),e.off("keydown",i))};var a=function(e){if(n&&!(e&&"disabled"===n.getAutoClose()||e&&3===e.which)){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.isOpen=!1,t.$$phase||n.$apply())}}},i=function(e){27===e.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&n.isOpen&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,l,s,u,c){var p,d,m=this,f=e.$new(),g=i.appendToOpenClass,h=i.openClass,b=angular.noop,v=n.onToggle?a(n.onToggle):angular.noop,$=!1,y=null,w=!1,k=s.find("body");t.addClass("dropdown"),this.init=function(){if(n.isOpen&&(d=a(n.isOpen),b=d.assign,e.$watch(d,function(e){f.isOpen=!!e})),angular.isDefined(n.dropdownAppendTo)){var i=a(n.dropdownAppendTo)(f);i&&(y=angular.element(i))}$=angular.isDefined(n.dropdownAppendToBody),w=angular.isDefined(n.keyboardNav),$&&!y&&(y=k),y&&m.dropdownMenu&&(y.append(m.dropdownMenu),t.on("$destroy",function(){m.dropdownMenu.remove()}))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen,angular.isFunction(b)&&b(f,f.isOpen),f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return m.toggleElement},f.getAutoClose=function(){return n.autoClose||"always"},f.getElement=function(){return t},f.isKeynavEnabled=function(){return w},f.focusDropdownEntry=function(e){var n=m.dropdownMenu?angular.element(m.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(m.selectedOption)?m.selectedOption=m.selectedOption===n.length-1?m.selectedOption:m.selectedOption+1:m.selectedOption=0;break;case 38:angular.isNumber(m.selectedOption)?m.selectedOption=0===m.selectedOption?0:m.selectedOption-1:m.selectedOption=n.length-1}n[m.selectedOption].focus()},f.getDropdownElement=function(){return m.dropdownMenu},f.focusToggleElement=function(){m.toggleElement&&m.toggleElement[0].focus();
},f.$watch("isOpen",function(n,a){if(y&&m.dropdownMenu){var i,s,d=l.positionElements(t,m.dropdownMenu,"bottom-left",!0);if(i={top:d.top+"px",display:n?"block":"none"},s=m.dropdownMenu.hasClass("dropdown-menu-right"),s?(i.left="auto",i.right=window.innerWidth-(d.left+t.prop("offsetWidth"))+"px"):(i.left=d.left+"px",i.right="auto"),!$){var w=l.offset(y);i.top=d.top-w.top+"px",s?i.right=window.innerWidth-(d.left-w.left+t.prop("offsetWidth"))+"px":i.left=d.left-w.left+"px"}m.dropdownMenu.css(i)}var k=y?y:t,D=k.hasClass(y?g:h);if(D===!n&&r[n?"addClass":"removeClass"](k,y?g:h).then(function(){angular.isDefined(n)&&n!==a&&v(e,{open:!!n})}),n)m.dropdownMenuTemplateUrl&&c(m.dropdownMenuTemplateUrl).then(function(e){p=f.$new(),u(e.trim())(p,function(e){var t=e;m.dropdownMenu.replaceWith(t),m.dropdownMenu=t})}),f.focusToggleElement(),o.open(f);else{if(m.dropdownMenuTemplateUrl){p&&p.$destroy();var x=angular.element('<ul class="dropdown-menu"></ul>');m.dropdownMenu.replaceWith(x),m.dropdownMenu=x}o.close(f),m.selectedOption=null}angular.isFunction(b)&&b(e,n)}),e.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,a){a.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,a){if(a&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t===e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap"]).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}}).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var a=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,r){if(a)return a.resolve(e,i,o,r);var l=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?l.push(n.resolve(t.invoke(e))):angular.isString(e)?l.push(n.resolve(t.get(e))):l.push(n.resolve(e))}),n.all(l).then(function(t){var n={},a=0;return angular.forEach(e,function(e,i){n[i]=t[a++]}),n})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){function a(t,a,i){i.modalInClass&&(e.addClass(a,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(n,o){var r=o();t.modalOptions.animation?e.removeClass(a,i.modalInClass).then(r):r()}))}return{replace:!0,templateUrl:"uib/template/modal/backdrop.html",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,a){return{scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,r){o.addClass(r.windowClass||""),o.addClass(r.windowTopClass||""),i.size=r.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var l=t.defer();r.$observe("modalRender",function(e){"true"===e&&l.resolve()}),l.promise.then(function(){var l=null;r.modalInClass&&(l=n(o,{addClass:r.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();n(o,{removeClass:r.modalInClass}).start().then(a)})),t.when(l).then(function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!a[0].activeElement||!o[0].contains(a[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap",function(e,t,n,a,i,o,r,l){function s(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function u(){for(var e=-1,t=$.keys(),n=0;n<t.length;n++)$.get(t[n]).value.backdrop&&(e=n);return e}function c(e,t){var n=$.get(e).value,a=n.appendTo;$.remove(e),m(n.modalDomEl,n.modalScope,function(){var t=n.openedClass||v;y.remove(t,e),a.toggleClass(t,y.hasKey(t)),p(!0)},n.closedDeferred),d(),t&&t.focus?t.focus():a.focus&&a.focus()}function p(e){var t;$.length()>0&&(t=$.top().value,t.modalDomEl.toggleClass(t.windowTopClass||"",e))}function d(){if(h&&-1===u()){var e=b;m(h,b,function(){e=null}),h=void 0,b=void 0}}function m(t,n,a,i){function r(){r.done||(r.done=!0,e.leave(t).then(function(){t.remove(),i&&i.resolve()}),n.$destroy(),a&&a())}var l,s=null,u=function(){return l||(l=o.defer(),s=l.promise),function(){l.resolve()}};return n.$broadcast(w.NOW_CLOSING_EVENT,u),o.when(s).then(r)}function f(e){if(e.isDefaultPrevented())return e;var t=$.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply(function(){w.dismiss(t.key,"escape key press")}));break;case 9:var n=w.loadFocusElementList(t),a=!1;e.shiftKey?(w.isFocusInFirstItem(e,n)||w.isModalFocused(e,t))&&(a=w.focusLastFocusableElement(n)):w.isFocusInLastItem(e,n)&&(a=w.focusFirstFocusableElement(n)),a&&(e.preventDefault(),e.stopPropagation())}}function g(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}var h,b,v="modal-open",$=l.createNew(),y=r.createNew(),w={NOW_CLOSING_EVENT:"modal.stack.now-closing"},k="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(u,function(e){b&&(b.index=e)}),n.on("keydown",f),i.$on("$destroy",function(){n.off("keydown",f)}),w.open=function(t,o){var r=n[0].activeElement,l=o.openedClass||v;p(!1),$.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),y.put(l,t);var s=o.appendTo,c=u();if(!s.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");c>=0&&!h&&(b=i.$new(!0),b.modalOptions=o,b.index=c,h=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),h.attr("backdrop-class",o.backdropClass),o.animation&&h.attr("modal-animation","true"),a(h)(b),e.enter(h,s));var d=angular.element('<div uib-modal-window="modal-window"></div>');d.attr({"template-url":o.windowTemplateUrl,"window-class":o.windowClass,"window-top-class":o.windowTopClass,size:o.size,index:$.length()-1,animate:"animate"}).html(o.content),o.animation&&d.attr("modal-animation","true"),e.enter(a(d)(o.scope),s).then(function(){o.scope.$$uibDestructionScheduled||e.addClass(s,l)}),$.top().value.modalDomEl=d,$.top().value.modalOpener=r},w.close=function(e,t){var n=$.get(e);return n&&g(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),c(e,n.value.modalOpener),!0):!n},w.dismiss=function(e,t){var n=$.get(e);return n&&g(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),c(e,n.value.modalOpener),!0):!n},w.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},w.getTop=function(){return $.top()},w.modalRendered=function(e){var t=$.get(e);t&&t.value.renderDeferred.resolve()},w.focusFirstFocusableElement=function(e){return e.length>0?(e[0].focus(),!0):!1},w.focusLastFocusableElement=function(e){return e.length>0?(e[e.length-1].focus(),!0):!1},w.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},w.isFocusInFirstItem=function(e,t){return t.length>0?(e.target||e.srcElement)===t[0]:!1},w.isFocusInLastItem=function(e,t){return t.length>0?(e.target||e.srcElement)===t[t.length-1]:!1},w.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll(k);return n?Array.prototype.filter.call(n,function(e){return s(e)}):n}}},w}]).provider("$uibModal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,a,i,o,r,l){function s(e){return e.template?n.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}var u={},c=null;return u.getPromiseChain=function(){return c},u.open=function(i){function u(){return b}var p=n.defer(),d=n.defer(),m=n.defer(),f=n.defer(),g={result:p.promise,opened:d.promise,closed:m.promise,rendered:f.promise,close:function(e){return l.close(g,e)},dismiss:function(e){return l.dismiss(g,e)}};if(i=angular.extend({},e.options,i),i.resolve=i.resolve||{},i.appendTo=i.appendTo||a.find("body").eq(0),!i.template&&!i.templateUrl)throw new Error("One of template or templateUrl options is required.");var h,b=n.all([s(i),r.resolve(i.resolve,{},null,null)]);return h=c=n.all([c]).then(u,u).then(function(e){var n=i.scope||t,a=n.$new();a.$close=g.close,a.$dismiss=g.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var r,s,u={};i.controller&&(u.$scope=a,u.$uibModalInstance=g,angular.forEach(e[1],function(e,t){u[t]=e}),s=o(i.controller,u,!0),i.controllerAs?(r=s.instance,i.bindToController&&(r.$close=a.$close,r.$dismiss=a.$dismiss,angular.extend(r,n)),r=s(),a[i.controllerAs]=r):r=s(),angular.isFunction(r.$onInit)&&r.$onInit()),l.open(g,{scope:a,deferred:p,renderDeferred:f,closedDeferred:m,content:e[0],animation:i.animation,backdrop:i.backdrop,keyboard:i.keyboard,backdropClass:i.backdropClass,windowTopClass:i.windowTopClass,windowClass:i.windowClass,windowTemplateUrl:i.windowTemplateUrl,size:i.size,openedClass:i.openedClass,appendTo:i.appendTo}),d.resolve(!0)},function(e){d.reject(e),p.reject(e)})["finally"](function(){c===h&&(c=null)}),g},u}]};return e}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,a){t.setNumPages=a.numPages?e(a.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},a.itemsPerPage?t._watchers.push(n.$parent.$watch(a.itemsPerPage,function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()})):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",function(e,a){(angular.isDefined(e)||e!==a)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())})},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,a){a&&a.preventDefault();var i=!n.ngDisabled||!a;i&&n.page!==e&&e>0&&e<=n.totalPages&&(a&&a.target&&a.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",function(){for(;t._watchers.length;)t._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,a){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):a.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},replace:!0,link:function(t,n,a,i){var o=i[0],r=i[1];r&&o.init(r,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,a,i){function o(e,t,n){return{number:e,text:t,active:n}}function r(e,t){var n=[],a=1,i=t,r=angular.isDefined(s)&&t>s;r&&(u?(a=Math.max(e-Math.floor(s/2),1),i=a+s-1,i>t&&(i=t,a=i-s+1)):(a=(Math.ceil(e/s)-1)*s+1,i=Math.min(a+s-1,t)));for(var l=a;i>=l;l++){var m=o(l,d(l),l===e);n.push(m)}if(r&&s>0&&(!u||c||p)){if(a>1){if(!p||a>3){var f=o(a-1,"...",!1);n.unshift(f)}if(p){if(3===a){var g=o(2,"2",!1);n.unshift(g)}var h=o(1,"1",!1);n.unshift(h)}}if(t>i){if(!p||t-2>i){var b=o(i+1,"...",!1);n.push(b)}if(p){if(i===t-2){var v=o(t-1,t-1,!1);n.push(v)}var $=o(t,t,!1);n.push($)}}}return n}var l=this,s=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,u=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,c=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,p=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,d=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,a.create(this,e,t),t.maxSize&&l._watchers.push(e.$parent.$watch(n(t.maxSize),function(e){s=parseInt(e,10),l.render()}));var m=this.render;this.render=function(){m(),e.page>0&&e.page<=e.totalPages&&(e.pages=r(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},replace:!0,link:function(e,n,a,i){var o=i[0],r=i[1];r&&o.init(r,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(i,o,r,l,s,u,c,p,d){function m(e){if(27===e.which){var t=f.top();t&&(t.value.close(),f.removeTop(),t=null)}}var f=d.createNew();return l.on("keypress",m),c.$on("$destroy",function(){l.off("keypress",m)}),function(i,c,d,m){function g(e){var t=(e||m.trigger||d).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}m=angular.extend({},t,a,m);var h=e(i),b=u.startSymbol(),v=u.endSymbol(),$="<div "+h+'-popup title="'+b+"title"+v+'" '+(m.useContentExp?'content-exp="contentExp()" ':'content="'+b+"content"+v+'" ')+'placement="'+b+"placement"+v+'" popup-class="'+b+"popupClass"+v+'" animation="animation" is-open="isOpen"origin-scope="origScope" class="uib-position-measure"></div>';return{compile:function(e,t){var n=o($);return function(e,t,a,o){function u(){H.isOpen?h():d()}function d(){V&&!e.$eval(a[c+"Enable"])||(y(),D(),H.popupDelay?E||(E=r(b,H.popupDelay,!1)):b())}function h(){v(),H.popupCloseDelay?U||(U=r($,H.popupCloseDelay,!1)):$()}function b(){return v(),y(),H.content?(w(),void H.$evalAsync(function(){H.isOpen=!0,x(!0),j()})):angular.noop}function v(){E&&(r.cancel(E),E=null),A&&(r.cancel(A),A=null)}function $(){H&&H.$evalAsync(function(){H&&(H.isOpen=!1,x(!1),H.animation?I||(I=r(k,150,!1)):k())})}function y(){U&&(r.cancel(U),U=null),I&&(r.cancel(I),I=null)}function w(){S||(P=H.$new(),S=n(P,function(e){N?l.find("body").append(e):t.after(e)}),C())}function k(){v(),y(),M(),S&&(S.remove(),S=null),P&&(P.$destroy(),P=null)}function D(){H.title=a[c+"Title"],q?H.content=q(e):H.content=a[i],H.popupClass=a[c+"Class"],H.placement=angular.isDefined(a[c+"Placement"])?a[c+"Placement"]:m.placement;var t=s.parsePlacement(H.placement);F=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(a[c+"PopupDelay"],10),o=parseInt(a[c+"PopupCloseDelay"],10);H.popupDelay=isNaN(n)?m.popupDelay:n,H.popupCloseDelay=isNaN(o)?m.popupCloseDelay:o}function x(t){R&&angular.isFunction(R.assign)&&R.assign(e,t)}function C(){Y.length=0,q?(Y.push(e.$watch(q,function(e){H.content=e,!e&&H.isOpen&&$()})),Y.push(P.$watch(function(){L||(L=!0,P.$$postDigest(function(){L=!1,H&&H.isOpen&&j()}))}))):Y.push(a.$observe(i,function(e){H.content=e,!e&&H.isOpen?$():j()})),Y.push(a.$observe(c+"Title",function(e){H.title=e,H.isOpen&&j()})),Y.push(a.$observe(c+"Placement",function(e){H.placement=e?e:m.placement;var t=s.parsePlacement(H.placement);F=t[1]?t[0]+"-"+t[1]:t[0],H.isOpen&&j()}))}function M(){Y.length&&(angular.forEach(Y,function(e){e()}),Y.length=0)}function T(e){H&&H.isOpen&&S&&(t[0].contains(e.target)||S[0].contains(e.target)||h())}function O(){var e=a[c+"Trigger"];B(),z=g(e),"none"!==z.show&&z.show.forEach(function(e,n){"outsideClick"===e?(t.on("click",u),l.on("click",T)):e===z.hide[n]?t.on(e,u):e&&(t.on(e,d),t.on(z.hide[n],h)),t.on("keypress",function(e){27===e.which&&h()})})}var S,P,I,E,U,A,F,N=angular.isDefined(m.appendToBody)?m.appendToBody:!1,z=g(void 0),V=angular.isDefined(a[c+"Enable"]),H=e.$new(!0),L=!1,R=angular.isDefined(a[c+"IsOpen"])?p(a[c+"IsOpen"]):!1,q=m.useContentExp?p(a[i]):!1,Y=[],j=function(){S&&S.html()&&(A||(A=r(function(){var e=s.positionElements(t,S,H.placement,N);S.css({top:e.top+"px",left:e.left+"px"}),S.hasClass(e.placement.split("-")[0])||(S.removeClass(F.split("-")[0]),S.addClass(e.placement.split("-")[0])),S.hasClass(m.placementClassPrefix+e.placement)||(S.removeClass(m.placementClassPrefix+F),S.addClass(m.placementClassPrefix+e.placement)),S.hasClass("uib-position-measure")?(s.positionArrow(S,e.placement),S.removeClass("uib-position-measure")):F!==e.placement&&s.positionArrow(S,e.placement),F=e.placement,A=null},0,!1)))};H.origScope=e,H.isOpen=!1,f.add(H,{close:$}),H.contentExp=function(){return H.content},a.$observe("disabled",function(e){e&&v(),e&&H.isOpen&&$()}),R&&e.$watch(R,function(e){H&&!e===H.isOpen&&u()});var B=function(){z.show.forEach(function(e){"outsideClick"===e?t.off("click",u):(t.off(e,d),t.off(e,u))}),z.hide.forEach(function(e){"outsideClick"===e?l.off("click",T):t.off(e,h)})};O();var W=e.$eval(a[c+"Animation"]);H.animation=angular.isDefined(W)?!!W:m.animation;var _,G=c+"AppendToBody";_=G in a&&void 0===a[G]?!0:e.$eval(a[G]),N=angular.isDefined(_)?_:N,e.$on("$destroy",function(){B(),k(),f.remove(H),H=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var l,s,u,c=i.$eval(r.tooltipTemplateTranscludeScope),p=0,d=function(){s&&(s.remove(),s=null),l&&(l.$destroy(),l=null),u&&(e.leave(u).then(function(){s=null}),s=u,u=null)};i.$watch(t.parseAsResourceUrl(r.uibTooltipTemplateTransclude),function(t){var r=++p;t?(a(t,!0).then(function(a){if(r===p){var i=c.$new(),s=a,m=n(s)(i,function(t){d(),e.enter(t,o)});l=i,u=m,l.$emit("$includeContentLoaded",t)}},function(){r===p&&(d(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):d()}),i.$on("$destroy",d)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,a){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation()&&n.addClass(a.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){function a(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}var i=this,o=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=a(),this.addBar=function(e,t,n){o||t.css({transition:"none"}),this.bars.push(e),e.max=a(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){var t=i.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,i.removeBar(e)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){i.bars.forEach(function(e){e.max=a(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var a={$setViewValue:angular.noop},i=this;this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&a.$viewValue===t?0:t;a.$setViewValue(n),a.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){function t(e){for(var t=0;t<a.tabs.length;t++)if(a.tabs[t].index===e)return t}var n,a=this;a.tabs=[],a.select=function(e,o){if(!i){var r=t(n),l=a.tabs[r];l&&(l.tab.onDeselect({$event:o}),l.tab.active=!1);var s=a.tabs[e];s?(s.tab.onSelect({$event:o}),s.tab.active=!0,a.active=s.index,n=s.index):!s&&angular.isNumber(n)&&(a.active=null,n=null)}},a.addTab=function(e){if(a.tabs.push({tab:e,index:e.index}),a.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===a.active||!angular.isNumber(a.active)&&1===a.tabs.length){var n=t(e.index);a.select(n)}},a.removeTab=function(e){var n=t(e.index);if(e.index===a.active){var i=n===a.tabs.length-1?n-1:n+1%a.tabs.length;a.select(i)}a.tabs.splice(n,1)},e.$watch("tabset.active",function(e){angular.isNumber(e)&&e!==n&&a.select(t(e))});var i;e.$on("$destroy",function(){i=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1,angular.isUndefined(n.active)&&(e.active=0)}}}).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,a,i,o){t.disabled=!1,a.disable&&t.$parent.$watch(e(a.disable),function(e){t.disabled=!!e}),angular.isUndefined(a.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:t.index=0),angular.isUndefined(a.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,a=0;a<i.tabs.length;a++)if(i.tabs[a].tab===t){n=a;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(t,n,a){var i=t.$eval(a.uibTabContentTransclude).tab;i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,a,i,o,r){function l(){var t=+e.hours,n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===y[1]&&(t+=12)),t):void 0}function s(){var t=+e.minutes;return t>=0&&60>t?t:void 0}function u(){var t=+e.seconds;return t>=0&&60>t?t:void 0}function c(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function p(e){d(),$.$setViewValue(new Date(b)),m(e)}function d(){$.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function m(t){if($.$modelValue){var n=b.getHours(),a=b.getMinutes(),i=b.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:c(n,!w),"m"!==t&&(e.minutes=c(a)),e.meridian=b.getHours()<12?y[0]:y[1],"s"!==t&&(e.seconds=c(i)),e.meridian=b.getHours()<12?y[0]:y[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=y[0]}function f(e){b=h(b,e),p()}function g(e,t){return h(e,60*t)}function h(e,t){var n=new Date(e.getTime()+1e3*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),a}var b=new Date,v=[],$={$setViewValue:angular.noop},y=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):r.meridians||o.DATETIME_FORMATS.AMPMS,w=angular.isDefined(n.padHours)?e.$parent.$eval(n.padHours):!0;e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),
this.init=function(t,a){$=t,$.$render=this.render,$.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),o=a.eq(1),l=a.eq(2),s=angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):r.mousewheel;s&&this.setupMousewheelEvents(i,o,l);var u=angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):r.arrowkeys;u&&this.setupArrowkeyEvents(i,o,l),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o,l)};var k=r.hourStep;n.hourStep&&v.push(e.$parent.$watch(a(n.hourStep),function(e){k=+e}));var D=r.minuteStep;n.minuteStep&&v.push(e.$parent.$watch(a(n.minuteStep),function(e){D=+e}));var x;v.push(e.$parent.$watch(a(n.min),function(e){var t=new Date(e);x=isNaN(t)?void 0:t}));var C;v.push(e.$parent.$watch(a(n.max),function(e){var t=new Date(e);C=isNaN(t)?void 0:t}));var M=!1;n.ngDisabled&&v.push(e.$parent.$watch(a(n.ngDisabled),function(e){M=e})),e.noIncrementHours=function(){var e=g(b,60*k);return M||e>C||b>e&&x>e},e.noDecrementHours=function(){var e=g(b,60*-k);return M||x>e||e>b&&e>C},e.noIncrementMinutes=function(){var e=g(b,D);return M||e>C||b>e&&x>e},e.noDecrementMinutes=function(){var e=g(b,-D);return M||x>e||e>b&&e>C},e.noIncrementSeconds=function(){var e=h(b,T);return M||e>C||b>e&&x>e},e.noDecrementSeconds=function(){var e=h(b,-T);return M||x>e||e>b&&e>C},e.noToggleMeridian=function(){return b.getHours()<12?M||g(b,720)>C:M||g(b,-720)<x};var T=r.secondStep;n.secondStep&&v.push(e.$parent.$watch(a(n.secondStep),function(e){T=+e})),e.showSeconds=r.showSeconds,n.showSeconds&&v.push(e.$parent.$watch(a(n.showSeconds),function(t){e.showSeconds=!!t})),e.showMeridian=r.showMeridian,n.showMeridian&&v.push(e.$parent.$watch(a(n.showMeridian),function(t){if(e.showMeridian=!!t,$.$error.time){var n=l(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(b.setHours(n),p())}else m()})),this.setupMousewheelEvents=function(t,n,a){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()}),a.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n,a){t.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))}),n.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))}),a.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))})},this.setupInputEvents=function(t,n,a){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,a){$.$setViewValue(null),$.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n),angular.isDefined(a)&&(e.invalidSeconds=a)};e.updateHours=function(){var e=l(),t=s();$.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(b.setHours(e),b.setMinutes(t),x>b||b>C?i(!0):p("h")):i(!0)},t.bind("blur",function(t){$.$setTouched(),null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=c(e.hours,!w)})}),e.updateMinutes=function(){var e=s(),t=l();$.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(b.setHours(t),b.setMinutes(e),x>b||b>C?i(void 0,!0):p("m")):i(void 0,!0)},n.bind("blur",function(t){$.$setTouched(),null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=c(e.minutes)})}),e.updateSeconds=function(){var e=u();$.$setDirty(),angular.isDefined(e)?(b.setSeconds(e),p("s")):i(void 0,void 0,!0)},a.bind("blur",function(t){!e.invalidSeconds&&e.seconds<10&&e.$apply(function(){e.seconds=c(e.seconds)})})},this.render=function(){var t=$.$viewValue;isNaN(t)?($.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(b=t),x>b||b>C?($.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):d(),m())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):r.showSpinners,e.incrementHours=function(){e.noIncrementHours()||f(60*k*60)},e.decrementHours=function(){e.noDecrementHours()||f(60*-k*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||f(60*D)},e.decrementMinutes=function(){e.noDecrementMinutes()||f(60*-D)},e.incrementSeconds=function(){e.noIncrementSeconds()||f(T)},e.decrementSeconds=function(){e.noDecrementSeconds()||f(-T)},e.toggleMeridian=function(){var t=s(),n=l();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?f(720*(b.getHours()<12?60:-60)):e.meridian=e.meridian===y[0]?y[1]:y[0])},e.blur=function(){$.$setTouched()},e.$on("$destroy",function(){for(;v.length;)v.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],controller:"UibTimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,a,i,o,r,l,s,u,c,p,d){function m(){H.moveInProgress||(H.moveInProgress=!0,H.$digest()),Z()}function f(){H.position=S?p.offset(t):p.position(t),H.position.top+=t.prop("offsetHeight")}var g,h,b=[9,13,27,38,40],v=200,$=e.$eval(n.typeaheadMinLength);$||0===$||($=1),e.$watch(n.typeaheadMinLength,function(e){$=e||0===e?e:1});var y=e.$eval(n.typeaheadWaitMs)||0,w=e.$eval(n.typeaheadEditable)!==!1;e.$watch(n.typeaheadEditable,function(e){w=e!==!1});var k,D,x=i(n.typeaheadLoading).assign||angular.noop,C=i(n.typeaheadOnSelect),M=angular.isDefined(n.typeaheadSelectOnBlur)?e.$eval(n.typeaheadSelectOnBlur):!1,T=i(n.typeaheadNoResults).assign||angular.noop,O=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,S=n.typeaheadAppendToBody?e.$eval(n.typeaheadAppendToBody):!1,P=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,I=e.$eval(n.typeaheadFocusFirst)!==!1,E=n.typeaheadSelectOnExact?e.$eval(n.typeaheadSelectOnExact):!1,U=i(n.typeaheadIsOpen).assign||angular.noop,A=e.$eval(n.typeaheadShowHint)||!1,F=i(n.ngModel),N=i(n.ngModel+"($$$p)"),z=function(t,n){return angular.isFunction(F(e))&&h&&h.$options&&h.$options.getterSetter?N(t,{$$$p:n}):F.assign(t,n)},V=d.parse(n.uibTypeahead),H=e.$new(),L=e.$on("$destroy",function(){H.$destroy()});H.$on("$destroy",L);var R="typeahead-"+H.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":R});var q,Y;A&&(q=angular.element("<div></div>"),q.css("position","relative"),t.after(q),Y=t.clone(),Y.attr("placeholder",""),Y.attr("tabindex","-1"),Y.val(""),Y.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),q.append(Y),Y.after(t));var j=angular.element("<div uib-typeahead-popup></div>");j.attr({id:R,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&j.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&j.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var B=function(){A&&Y.val("")},W=function(){H.matches=[],H.activeIdx=-1,t.attr("aria-expanded",!1),B()},_=function(e){return R+"-option-"+e};H.$watch("activeIdx",function(e){0>e?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",_(e))});var G=function(e,t){return H.matches.length>t&&e?e.toUpperCase()===H.matches[t].label.toUpperCase():!1},K=function(n,a){var i={$viewValue:n};x(e,!0),T(e,!1),o.when(V.source(e,i)).then(function(o){var r=n===g.$viewValue;if(r&&k)if(o&&o.length>0){H.activeIdx=I?0:-1,T(e,!1),H.matches.length=0;for(var l=0;l<o.length;l++)i[V.itemName]=o[l],H.matches.push({id:_(l),label:V.viewMapper(H,i),model:o[l]});if(H.query=n,f(),t.attr("aria-expanded",!0),E&&1===H.matches.length&&G(n,0)&&(angular.isNumber(H.debounceUpdate)||angular.isObject(H.debounceUpdate)?c(function(){H.select(0,a)},angular.isNumber(H.debounceUpdate)?H.debounceUpdate:H.debounceUpdate["default"]):H.select(0,a)),A){var s=H.matches[0].label;angular.isString(n)&&n.length>0&&s.slice(0,n.length).toUpperCase()===n.toUpperCase()?Y.val(n+s.slice(n.length)):Y.val("")}}else W(),T(e,!0);r&&x(e,!1)},function(){W(),x(e,!1),T(e,!0)})};S&&(angular.element(s).on("resize",m),l.find("body").on("scroll",m));var Z=c(function(){H.matches.length&&f(),H.moveInProgress=!1},v);H.moveInProgress=!1,H.query=void 0;var X,J=function(e){X=r(function(){K(e)},y)},Q=function(){X&&r.cancel(X)};W(),H.assignIsOpen=function(t){U(e,t)},H.select=function(a,i){var o,l,s={};D=!0,s[V.itemName]=l=H.matches[a].model,o=V.modelMapper(e,s),z(e,o),g.$setValidity("editable",!0),g.$setValidity("parse",!0),C(e,{$item:l,$model:o,$label:V.viewMapper(e,s),$event:i}),W(),H.$eval(n.typeaheadFocusOnSelect)!==!1&&r(function(){t[0].focus()},0,!1)},t.on("keydown",function(t){if(0!==H.matches.length&&-1!==b.indexOf(t.which)){if(-1===H.activeIdx&&(9===t.which||13===t.which)||9===t.which&&t.shiftKey)return W(),void H.$digest();t.preventDefault();var n;switch(t.which){case 9:case 13:H.$apply(function(){angular.isNumber(H.debounceUpdate)||angular.isObject(H.debounceUpdate)?c(function(){H.select(H.activeIdx,t)},angular.isNumber(H.debounceUpdate)?H.debounceUpdate:H.debounceUpdate["default"]):H.select(H.activeIdx,t)});break;case 27:t.stopPropagation(),W(),e.$digest();break;case 38:H.activeIdx=(H.activeIdx>0?H.activeIdx:H.matches.length)-1,H.$digest(),n=j.find("li")[H.activeIdx],n.parentNode.scrollTop=n.offsetTop;break;case 40:H.activeIdx=(H.activeIdx+1)%H.matches.length,H.$digest(),n=j.find("li")[H.activeIdx],n.parentNode.scrollTop=n.offsetTop}}}),t.bind("focus",function(e){k=!0,0!==$||g.$viewValue||r(function(){K(g.$viewValue,e)},0)}),t.bind("blur",function(e){M&&H.matches.length&&-1!==H.activeIdx&&!D&&(D=!0,H.$apply(function(){angular.isObject(H.debounceUpdate)&&angular.isNumber(H.debounceUpdate.blur)?c(function(){H.select(H.activeIdx,e)},H.debounceUpdate.blur):H.select(H.activeIdx,e)})),!w&&g.$error.editable&&(g.$viewValue="",g.$setValidity("editable",!0),g.$setValidity("parse",!0),t.val("")),k=!1,D=!1});var ee=function(n){t[0]!==n.target&&3!==n.which&&0!==H.matches.length&&(W(),u.$$phase||e.$digest())};l.on("click",ee),e.$on("$destroy",function(){l.off("click",ee),(S||P)&&te.remove(),S&&(angular.element(s).off("resize",m),l.find("body").off("scroll",m)),j.remove(),A&&q.remove()});var te=a(j)(H);S?l.find("body").append(te):P?angular.element(P).eq(0).append(te):t.after(te),this.init=function(t,n){g=t,h=n,H.debounceUpdate=g.$options&&i(g.$options.debounce)(e),g.$parsers.unshift(function(t){return k=!0,0===$||t&&t.length>=$?y>0?(Q(),J(t)):K(t):(x(e,!1),Q(),W()),w?t:t?void g.$setValidity("editable",!1):(g.$setValidity("editable",!0),null)}),g.$formatters.push(function(t){var n,a,i={};return w||g.$setValidity("editable",!0),O?(i.$model=t,O(e,i)):(i[V.itemName]=t,n=V.viewMapper(e,i),i[V.itemName]=void 0,a=V.viewMapper(e,i),n!==a?n:t)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(e,t,n,a){a[2].init(a[0],a[1])}}}).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,a){t.templateUrl=a.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,a){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e(function(){t.select({activeIdx:n,evt:a})},angular.isNumber(i)?i:i["default"]):t.select({activeIdx:n,evt:a})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"uib/template/typeahead/typeahead-match.html";e(r).then(function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(a)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,r){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=r?(""+t).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div class="panel" ng-class="panelClass || \'panel-default\'">\n  <div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n    <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n  <div class="carousel-inner" ng-transclude></div>\n  <a role="button" href class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n    <span class="sr-only">previous</span>\n  </a>\n  <a role="button" href class="right carousel-control" ng-click="next()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n    <span class="sr-only">next</span>\n  </a>\n  <ol class="carousel-indicators" ng-show="slides.length > 1">\n    <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n      <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n    </li>\n  </ol>\n</div>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div class="uib-datepicker" ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table class="uib-daypicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table class="uib-monthpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/popup.html",'<div>\n  <ul class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n    <li ng-transclude></li>\n    <li ng-if="showButtonBar" class="uib-button-bar">\n      <span class="btn-group pull-left">\n        <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n        <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n      </span>\n      <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n    </li>\n  </ul>\n</div>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table class="uib-yearpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/backdrop.html",'<div class="modal-backdrop"\n     uib-modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    uib-modal-animation-class="fade"\n    modal-in-class="in"\n    ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}">\n    <div class="modal-dialog {{size ? \'modal-\' + size : \'\'}}"><div class="modal-content" uib-modal-transclude></div></div>\n</div>\n')}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    uib-tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        uib-tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input style="width:50px;" type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n');
}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0}),function(e,t){"use strict";if("function"==typeof define&&define.amd)define(["angular"],t);else{if("undefined"==typeof module||"object"!=typeof module.exports)return t(e.angular);module.exports=t(require("angular"))}}(this,function(e){function t(t,n,a){t.data=e.copy(a),t.ok=function(e){n.close(e)},t.cancel=function(t){e.isUndefined(t)&&(t="cancel"),n.dismiss(t)}}function n(t,n){return function(a,i){var o=e.copy(n);return i=e.extend(o,i||{}),a=e.extend({},i.defaultLabels,a||{}),"templateUrl"in i&&"template"in i&&delete i.template,i.resolve={data:function(){return a}},t.open(i).result}}function a(t){return{priority:1,restrict:"A",scope:{confirmIf:"=",ngClick:"&",confirm:"@",confirmSettings:"=",confirmTitle:"@",confirmOk:"@",confirmCancel:"@"},link:function(n,a,i){a.unbind("click").bind("click",function(a){if(a.preventDefault(),e.isUndefined(n.confirmIf)||n.confirmIf){var i={text:n.confirm};n.confirmTitle&&(i.title=n.confirmTitle),n.confirmOk&&(i.ok=n.confirmOk),n.confirmCancel&&(i.cancel=n.confirmCancel),t(i,n.confirmSettings||{}).then(n.ngClick)}else n.$apply(n.ngClick)})}}}e.module("angular-confirm",["ui.bootstrap.modal"]).controller("ConfirmModalController",t).value("$confirmModalDefaults",{template:'<div class="modal-header" ng-enter="ok()"><h3 class="modal-title">{{data.title}}</h3></div><div class="modal-body">{{data.text}}</div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()" focused="true">{{data.ok}}</button><button class="btn btn-default" ng-click="cancel()">{{data.cancel}}</button></div>',controller:"ConfirmModalController",defaultLabels:{title:"Confirm",ok:"OK",cancel:"Cancel"}}).factory("$confirm",n).directive("confirm",a),t.$inject=["$scope","$uibModalInstance","data"],n.$inject=["$uibModal","$confirmModalDefaults"],a.$inject=["$confirm"]}),function(){"use strict";function e(e,t){return{link:function(n,a,i){var o=t(i.focused);n.$watch(o,function(t){t===!0&&e(function(){a[0].focus()})}),a.bind("blur",function(){o&&o.assign&&n.$apply(o.assign(n,!1))})}}}angular.module("angular-confirm").directive("focused",e),e.$inject=["$timeout","$parse"]}(),function(){"use strict";angular.module("meetupModule").directive("myValidation",function(){return{restrict:"A",require:"^form",link:function(e,t,n,a){var i=t[0].querySelector("[name]"),o=angular.element(i),r=o.attr("name"),l=!1;o.bind("blur",function(){l=!0,t.toggleClass("has-error",a[r].$invalid)}),e.$watch(function(){return a[r].$invalid},function(e){!l&&e||t.toggleClass("has-error",e)}),e.$on("show-errors-check-validity",function(){t.toggleClass("has-error",a[r].$invalid)}),e.$on("show-errors-reset",function(){$timeout(function(){t.removeClass("has-error")},0,!1)})}}})}(),function(){"use strict";angular.module("meetupModule").directive("scrollOnFocus",function(){return{restrict:"A",link:function(e,t){t.focus(function(){$("body").animate({scrollTop:t.offset().top},1e3)})}}})}();
//# sourceMappingURL=data:application/json;base64,
